# Python imports
import math
from collections import defaultdict
import os, sys

# Snakemake config file
configfile: "../Snake.config.yaml"

include: 'mosaic_count.smk'


"""
From Snakemake config file, generate input files architecture : 1 sample per folder and 1 or multiple BAM files per sample
"""

# Retrieve samples and bam files into python lists
sample_list, bam_list = glob_wildcards(config['input_bam_location'] + "{sample}/selected/{bam}.bam")

print(sample_list, type(sample_list))
print(bam_list, type(bam_list))

# cell_per_sample= defaultdict(list)
bam_per_sample = defaultdict(list)

for sample,bam in zip(sample_list,bam_list):
    bam_per_sample[sample].append(bam)
    # cell_per_sample[sample].append(bam.replace('.sort.mdup',''))

# allbams_per_sample = defaultdict(list)
# for sample in samples:
#     allbams_per_sample[sample] = glob_wildcards(config['input_bam_location'] + "{}/all/{{bam}}.bam".format(sample)).bam

# print("Detected {} samples:".format(len(samples)))
# for s in samples:
#     print("  {}:\t{} cells\t {} selected cells".format(s, len(allbams_per_sample[s]), len(bam_per_sample[s])))


import os.path

# Current state of the pipeline:
# ==============================
# * count reads in the bam files (in fixed and variable-width bins of various sizes)
# * determine strand states of each chromosome in each single cell, including SCEs
# * plot all single cell libraries in different window sizes
# * calculate a segmentation into potential SVs using Mosaicatcher



rule all:
    input:
        expand("counts/{sample}/{bam}_{window}_fixed.txt.gz", sample=sample_list, bam=bam_list, window=[1e5])

